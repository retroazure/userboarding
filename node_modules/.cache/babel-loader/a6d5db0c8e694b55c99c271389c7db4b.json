{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomas\\\\Desktop\\\\Lambda\\\\userboarding\\\\src\\\\components\\\\Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as yup from 'yup';\nimport axios from 'axios';\n\nlet Form = props => {\n  let users = props.users;\n  let setUsers = props.setUsers; //State \n\n  const [formState, setFormState] = useState({\n    //Stores form data here\n    name: '',\n    email: '',\n    password: '',\n    terms: false\n  });\n  const [inputErrors, setInputErrors] = useState({\n    //State for form input validation errors\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  }); //Input validation schema using Yup\n\n  const formSchema = yup.object().shape({\n    name: yup.string().min(1, \"Type your name\").required(\"Name is Required\"),\n    email: yup.string().email(\"Must be a valid email address.\").required(\"Must include email address.\"),\n    password: yup.string().min(6, \"Passwords must be at least 6 characters long.\").required(\"Password is Required\"),\n    terms: yup.boolean().oneOf([true], \"You must accept Terms and Conditions\")\n  }); //Callback functions\n\n  let submitClicked = event => {\n    event.preventDefault();\n    axios.post('https://reqres.in/api/users', formState).then(response => {\n      console.log('Data response:', response.data);\n      setUsers([...users, response.data.name]);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  let onFormInput = event => {\n    let checked = event.target.parentElement.parentElement.querySelector('.terms').checked; //Sets inputErrors state if invalid input\n\n    yup.reach(formSchema, event.target.name).validate(event.target.value).then(valid => {\n      setInputErrors({ ...inputErrors,\n        [event.target.name]: ''\n      });\n    }).catch(err => {\n      setInputErrors({ ...inputErrors,\n        [event.target.name]: err.errors[0]\n      });\n    }); //Sets form state\n\n    formState[event.target.name] = event.target.value;\n    setFormState({ ...formState,\n      terms: checked // ...formState,\n      // [event.target.name]: event.target.value,\n      // terms: checked  \n\n    }); // event.persist()\n  };\n\n  useEffect(() => {\n    const formSchema = yup.object().shape({\n      //Had to copy schema into here for it to work\n      name: yup.string().min(1, \"Type your name\").required(\"Name is Required\"),\n      email: yup.string().email(\"Must be a valid email address.\").required(\"Must include email address.\"),\n      password: yup.string().min(6, \"Passwords must be at least 6 characters long.\").required(\"Password is Required\"),\n      terms: yup.boolean().oneOf([true], \"You must accept Terms and Conditions\")\n    });\n    formSchema.isValid(formState).then(valid => {\n      //Enables button if the input is valid\n      document.querySelector('form button').disabled = !valid;\n    });\n  }, [formState]); //runs when formState changes\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => submitClicked(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n    name: \"name\",\n    type: \"text\",\n    value: formState.name,\n    onChange: event => onFormInput(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    type: \"text\",\n    value: formState.email,\n    onChange: event => onFormInput(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, \"Password\", /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    value: formState.password,\n    onChange: event => onFormInput(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"Accept Terms of Service\", /*#__PURE__*/React.createElement(\"input\", {\n    className: \"terms\",\n    name: \"terms\",\n    type: \"checkbox\",\n    onChange: event => onFormInput(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, inputErrors.name), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"emailerr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, inputErrors.email), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, inputErrors.password)));\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/tomas/Desktop/Lambda/userboarding/src/components/Form.js"],"names":["React","useState","useEffect","yup","axios","Form","props","users","setUsers","formState","setFormState","name","email","password","terms","inputErrors","setInputErrors","formSchema","object","shape","string","min","required","boolean","oneOf","submitClicked","event","preventDefault","post","then","response","console","log","data","catch","err","onFormInput","checked","target","parentElement","querySelector","reach","validate","value","valid","errors","isValid","document","disabled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as yup from 'yup';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nlet Form = props => {\r\n\r\n    let users = props.users;\r\n    let setUsers = props.setUsers;\r\n\r\n    //State \r\n\r\n    const [formState, setFormState] = useState({ //Stores form data here\r\n    \r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        terms: false\r\n    \r\n    });\r\n\r\n    const [inputErrors, setInputErrors] = useState({ //State for form input validation errors\r\n        email: \"\",\r\n        password: \"\",\r\n        terms: \"\"\r\n      });\r\n\r\n\r\n      //Input validation schema using Yup\r\n\r\n      const formSchema = yup.object().shape({\r\n        name: yup\r\n            .string()\r\n            .min(1, \"Type your name\")\r\n            .required(\"Name is Required\"),\r\n        email: yup\r\n            .string()\r\n            .email(\"Must be a valid email address.\")\r\n            .required(\"Must include email address.\"),\r\n        password: yup\r\n            .string()\r\n            .min(6, \"Passwords must be at least 6 characters long.\")\r\n            .required(\"Password is Required\"),\r\n        terms: yup\r\n            .boolean()\r\n            .oneOf([true], \"You must accept Terms and Conditions\")\r\n      });\r\n\r\n\r\n    //Callback functions\r\n\r\n\r\n    let submitClicked = event => { \r\n\r\n        event.preventDefault()\r\n\r\n        axios\r\n            .post('https://reqres.in/api/users', formState)\r\n            .then(response => {\r\n\r\n                console.log('Data response:', response.data);\r\n\r\n                setUsers([\r\n\r\n                    ...users,\r\n                    response.data.name\r\n\r\n                ]);\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                console.log(err);\r\n\r\n            });\r\n\r\n    }\r\n\r\n    \r\n\r\n    let onFormInput = (event) => {\r\n\r\n        let checked = event.target.parentElement.parentElement.querySelector('.terms').checked;\r\n\r\n        //Sets inputErrors state if invalid input\r\n\r\n        yup\r\n            .reach(formSchema, event.target.name)\r\n            .validate(event.target.value)\r\n            .then(valid => {\r\n\r\n                setInputErrors({\r\n\r\n                    ...inputErrors,\r\n                    [event.target.name]: ''\r\n\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                setInputErrors({\r\n\r\n                    ...inputErrors,\r\n                    [event.target.name]: err.errors[0]\r\n\r\n                });\r\n\r\n            })\r\n\r\n        //Sets form state\r\n        formState[event.target.name] = event.target.value;            \r\n        \r\n        setFormState({\r\n\r\n            ...formState,\r\n            terms:checked\r\n            // ...formState,\r\n            // [event.target.name]: event.target.value,\r\n            // terms: checked  \r\n        });\r\n\r\n        // event.persist()\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const formSchema = yup.object().shape({ //Had to copy schema into here for it to work\r\n            name: yup\r\n                .string()\r\n                .min(1, \"Type your name\")\r\n                .required(\"Name is Required\"),\r\n            email: yup\r\n                .string()\r\n                .email(\"Must be a valid email address.\")\r\n                .required(\"Must include email address.\"),\r\n            password: yup\r\n                .string()\r\n                .min(6, \"Passwords must be at least 6 characters long.\")\r\n                .required(\"Password is Required\"),\r\n            terms: yup\r\n                .boolean()\r\n                .oneOf([true], \"You must accept Terms and Conditions\")\r\n          });\r\n\r\n        formSchema.isValid(formState).then(valid => { //Enables button if the input is valid\r\n\r\n            document.querySelector('form button').disabled = !valid;\r\n\r\n        })\r\n\r\n    },[formState]) //runs when formState changes\r\n\r\n\r\n    return(\r\n\r\n        <form onSubmit={event => submitClicked(event)}>\r\n\r\n            <label>\r\n\r\n                Name\r\n\r\n                <input \r\n                name='name' \r\n                type='text' \r\n                value={formState.name}\r\n                onChange={event => onFormInput(event)}>\r\n                </input>\r\n\r\n            </label>\r\n\r\n            <label>\r\n\r\n                Email\r\n\r\n                <input name='email' \r\n                type='text' \r\n                value={formState.email} \r\n                onChange={event => onFormInput(event)}>\r\n                </input>\r\n\r\n            </label>\r\n\r\n            <label>\r\n\r\n                Password\r\n\r\n                <input \r\n                name='password' \r\n                type='password' \r\n                value={formState.password} \r\n                onChange={event => onFormInput(event)}>\r\n                </input>\r\n\r\n            </label>\r\n\r\n            <label>\r\n\r\n                Accept Terms of Service\r\n\r\n                <input \r\n                className='terms' \r\n                name='terms' \r\n                type='checkbox' \r\n                onChange={event => onFormInput(event)}>\r\n                </input>\r\n\r\n            </label>\r\n\r\n            <button disabled={true}>\r\n                Submit\r\n            </button>\r\n\r\n            <div>\r\n\r\n                <h2>{inputErrors.name}</h2>\r\n                <h2 className='emailerr'>{inputErrors.email}</h2>\r\n                <h2>{inputErrors.password}</h2>\r\n\r\n            </div>\r\n\r\n        </form>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}